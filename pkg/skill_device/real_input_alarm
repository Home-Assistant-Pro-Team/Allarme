######################################################################################
#                     FILE SOSTITUITO DA CARTELLA DETACHED                           #
######################################################################################

homeassistant:
  customize:
    package.node_anchors:
        Allarme: &alarm alarm_control_panel.home_alarm

# RICONOSCE AUTOMATICAMENTE:
  # - IMPUT INTEGRAZIONI SHELLY (interruttori)
  # - ESPHOME BISOGNA ASSEGNARE DA UI IL device_class ENERGIA AI SINGOLI SENSORI
  # - shelly con pulsanti
  # - spegne la luce automaticamente come si prova ad accenderla DAL TAST FISICO
  # - chiude la tapparella come si preme un tasto fisico

input_boolean:
  notify_real_input_alarm:
    name: Notifica pressione pulsanti
  action_real_input_alarm:
    name: Spegni per pressione pulsanti
    
automation:  
- id: real_input_alarm  
  alias: Real input alarm
  initial_state: true
  mode: restart
  variables: 
    alarm: *alarm
  trigger:
  - platform: event  # shelly pulsanti
    event_type: shelly.click
  - platform: event  # shelly interruttori ed esphome
    event_type: state_changed 
  condition: 
  - "{{is_state(alarm,'armed_away') or is_state(alarm,'triggered') or is_state(alarm,'pending') }}" 
  - or:
    - "{{ trigger.event.event_type == 'shelly.click'}}"
    - and:
      - >
        {% set exclude = expand('group.exclude_alarm_entities')|map(attribute='entity_id')|list %}
        {%- set last_time = states.binary_sensor |rejectattr('entity_id','in',exclude)| selectattr('attributes.device_class', 'defined')| selectattr('attributes.device_class', 'eq','power')| map(attribute='last_changed')|max -%}
        {%- set last_sensor = ((states.binary_sensor |rejectattr('entity_id','in',exclude)| selectattr('attributes.device_class', 'defined') | selectattr('last_changed', 'eq', last_time) | list)[0]) -%}
          {{-trigger.event.data.entity_id == last_sensor.entity_id and trigger.event.event_type == 'state_changed'-}}
      - or: 
        - "{{trigger.event.data.new_state.state == 'on' and trigger.event.data.old_state.state == 'off'}}"
        - "{{trigger.event.data.new_state.state == 'off' and trigger.event.data.old_state.state == 'on'}}"
  action:
  - if: "{{is_state('input_boolean.notify_real_input_alarm','on')}} "
    then:
    - service: script.notify_allert
      data: 
        google_on: 'false'
        alexa_on: 'false'
        notification_icon: mdi:alarm-light-outline
        title: --ALLARME--
        message: >
          {%- if trigger.event.event_type == 'state_changed' -%}
            {{- ("Allarme!!! Propabile infrazione. E' stato premuto l'interrutture: ")+trigger.event.data.new_state.attributes.friendly_name +(' alle ore ')+ (trigger.event.time_fired + timedelta(hours=1)).strftime("%H:%M")-}}
          {%-else-%}
            {{- ("Allarme!!! Propabile infrazione. E' stato premuto l'interrutture: ")+ device_attr(trigger.event.data.device_id , 'name')+(' alle ore ')+ (trigger.event.time_fired + timedelta(hours=1)).strftime("%H:%M")-}}
          {%-endif-%}
  - if: "{{is_state('input_boolean.action_real_input_alarm','on')}} "
    then:
    - alias: Se allarme Ã¨ scattato non permettere di accendere tapparelle e muovere le tapparelle altrimenti fai scattare allarme
      if: 
        - "{{is_state('input_boolean.alarm_triggered_state','on')}}"
      then:
        - service: homeassistant.turn_off
          target:
            entity_id: >
              {% if  trigger.event.event_type == 'shelly.click' %}
                {{expand(device_entities(trigger.event.data.device_id))  |selectattr('domain','in',['switch','light']) | map(attribute='entity_id')|list }}
              {% else %}
                {% set id = device_id(trigger.event.data.entity_id)%}
                {%- set sensor_power =expand(device_entities(id))  | selectattr('domain','in',['switch','light']) | map(attribute='entity_id')|list %}
                  {{sensor_power}}
              {% endif %}
        - delay:
            seconds: 1
        - service: cover.close_cover
          target: 
            entity_id: >
              {% if  trigger.event.event_type == 'shelly.click' %}
                {{expand(device_entities(trigger.event.data.device_id))  | selectattr('domain','eq','cover') | map(attribute='entity_id')|list }}
              {% else %}
                {% set id = device_id(trigger.event.data.entity_id)%}
                {%- set sensor_power =expand(device_entities(id))  | selectattr('domain','eq','cover') | map(attribute='entity_id')|list %}
                  {{sensor_power}}
              {% endif %}
    - service: alarm_control_panel.alarm_trigger # DAL LASCIARE COME ULTIMA SEQUENZA
      target:
        entity_id: *alarm
